timestamp: 20230416230128timestamp: 20230416225906timestamp: 20230416225803timestamp: 20230416225646timestamp: 20230416225529timestamp: 20230416225448timestamp: 20230416225324timestamp: 20230416225158timestamp: 20230416225113timestamp: 20230416225018timestamp: 20230416224907timestamp: 20230416224826timestamp: 20230416224746timestamp: 20230416224717timestamp: 20230416224703timestamp: 20230416224639timestamp: 20230416224558timestamp: 20230416224531timestamp: 20230416224506timestamp: 20230416224411timestamp: 20230416224325timestamp: 20230416223853timestamp: 20230416223617timestamp: 20230416223554User: import atexit
import os
import openai
import requests
import random as r

from utils import get_files_recursively


class ChatGPT:
    def __init__(self):
        openai.api_key = os.getenv("OPENAI_API_KEY")
        
        # Register the save_history method with atexit
        atexit.register(self.save_history)
        
        self.model = "text-davinci-003"
        self.conversation_history = ""
        self.load_history()


    def chat(self, prompt:str=None):
        if not prompt:
            prompt = input("you: ")
        
        self.conversation_history += f"User: {prompt}\nAI:"

        res = openai.Completion.create(
                model=self.model,
                prompt=self.conversation_history,
                max_tokens=100000,
                temperature=0)

        reply = res.choices[0].text.strip()
        
        self.conversation_history += reply + "\n"
        
        return reply
    
    @property
    def talk(self):
        while True:
            prompt = input("you: ")
            if prompt.lower() == "quit":
                print("Goodbye!")
                break
            
            res = self.chat(prompt)
            print(f"gpt:\n{res}")

    def save_history(self):
        from datetime import datetime

        # Get current date and time
        now = datetime.now()

        # Format date and time as string
        timestamp = now.strftime("%Y%m%d%H%M%S")

        with open("history.txt", 'w') as f:
            f.write(f"timestamp: {timestamp}")
            f.write(self.conversation_history + "\n")
            
        print("history saved")

    def load_history(self):
        with open("history.txt", 'r') as f:
            data = f.read()
        self.conversation_history += data
    
    def clear_history(self):
        yorn = input("ARE YOU SURE??? y or n: ")
        if yorn.lower() == "y":
            random_num = str(r.randint(1000, 9999))
            confirm = input(f"Enter {random_num} to clear history: ")
            if confirm == random_num:
                with open("history.txt", 'w') as f:
                    data = f.write("")
            print("history cleared!")

    def read_file(self, path:str=None):
        if not path:
            path = input("Enter path: ")
        self.chat(files._get_file(path))


class FileStorage:
    def __init__(self):
        pass
    def _get_file(self, path:str=None, name:str=None):
        if not path:
            path = input("Enter path: ")    
        if not name:
            name = os.path.basename(path)
            dot = name.index(".")
            name = name[:dot]
            print(f"Name: {name}")

        with open(path, 'r') as f:
            data = f.read()

        self.__setattr__(name, data)
        print(f"{name} successfully uploaded")
        return data


gpt = ChatGPT()
files = FileStorage()

AI:
User: import atexit
import os
import openai
import requests
import random as r

from utils import get_files_recursively


class ChatGPT:
    def __init__(self):
        openai.api_key = os.getenv("OPENAI_API_KEY")
        
        # Register the save_history method with atexit
        atexit.register(self.save_history)
        
        self.model = "text-davinci-003"
        self.conversation_history = ""
        self.load_history()


    def chat(self, prompt:str=None):
        if not prompt:
            prompt = input("you: ")
        
        self.conversation_history += f"User: {prompt}\nAI:"

        res = openai.Completion.create(
                model=self.model,
                prompt=self.conversation_history,
                max_tokens=4097,
                temperature=0)

        reply = res.choices[0].text.strip()
        
        self.conversation_history += reply + "\n"
        
        return reply
    
    @property
    def talk(self):
        while True:
            prompt = input("you: ")
            if prompt.lower() == "quit":
                print("Goodbye!")
                break
            
            res = self.chat(prompt)
            print(f"gpt:\n{res}")

    def save_history(self):
        from datetime import datetime

        # Get current date and time
        now = datetime.now()

        # Format date and time as string
        timestamp = now.strftime("%Y%m%d%H%M%S")

        with open("history.txt", 'w') as f:
            f.write(f"timestamp: {timestamp}")
            f.write(self.conversation_history + "\n")
            
        print("history saved")

    def load_history(self):
        with open("history.txt", 'r') as f:
            data = f.read()
        self.conversation_history += data
    
    def clear_history(self):
        yorn = input("ARE YOU SURE??? y or n: ")
        if yorn.lower() == "y":
            random_num = str(r.randint(1000, 9999))
            confirm = input(f"Enter {random_num} to clear history: ")
            if confirm == random_num:
                with open("history.txt", 'w') as f:
                    data = f.write("")
            print("history cleared!")

    def read_file(self, path:str=None):
        if not path:
            path = input("Enter path: ")
        self.chat(files._get_file(path))


class FileStorage:
    def __init__(self):
        pass
    def _get_file(self, path:str=None, name:str=None):
        if not path:
            path = input("Enter path: ")    
        if not name:
            name = os.path.basename(path)
            dot = name.index(".")
            name = name[:dot]
            print(f"Name: {name}")

        with open(path, 'r') as f:
            data = f.read()

        self.__setattr__(name, data)
        print(f"{name} successfully uploaded")
        return data


gpt = ChatGPT()
files = FileStorage()

AI:
User: import atexit
import os
import openai
import requests
import random as r

from utils import get_files_recursively


class ChatGPT:
    def __init__(self):
        openai.api_key = os.getenv("OPENAI_API_KEY")
        
        # Register the save_history method with atexit
        atexit.register(self.save_history)
        
        self.model = "text-davinci-003"
        self.conversation_history = ""
        self.load_history()


    def chat(self, prompt:str=None):
        if not prompt:
            prompt = input("you: ")
        
        self.conversation_history += f"User: {prompt}\nAI:"

        res = openai.Completion.create(
                model=self.model,
                prompt=self.conversation_history,
                max_tokens=1000,
                temperature=0)

        reply = res.choices[0].text.strip()
        
        self.conversation_history += reply + "\n"
        
        return reply
    
    @property
    def talk(self):
        while True:
            prompt = input("you: ")
            if prompt.lower() == "quit":
                print("Goodbye!")
                break
            
            res = self.chat(prompt)
            print(f"gpt:\n{res}")

    def save_history(self):
        from datetime import datetime

        # Get current date and time
        now = datetime.now()

        # Format date and time as string
        timestamp = now.strftime("%Y%m%d%H%M%S")

        with open("history.txt", 'w') as f:
            f.write(f"timestamp: {timestamp}")
            f.write(self.conversation_history + "\n")
            
        print("history saved")

    def load_history(self):
        with open("history.txt", 'r') as f:
            data = f.read()
        self.conversation_history += data
    
    def clear_history(self):
        yorn = input("ARE YOU SURE??? y or n: ")
        if yorn.lower() == "y":
            random_num = str(r.randint(1000, 9999))
            confirm = input(f"Enter {random_num} to clear history: ")
            if confirm == random_num:
                with open("history.txt", 'w') as f:
                    data = f.write("")
            print("history cleared!")

    def read_file(self, path:str=None):
        if not path:
            path = input("Enter path: ")
        self.chat(files._get_file(path))


class FileStorage:
    def __init__(self):
        pass
    def _get_file(self, path:str=None, name:str=None):
        if not path:
            path = input("Enter path: ")    
        if not name:
            name = os.path.basename(path)
            dot = name.index(".")
            name = name[:dot]
            print(f"Name: {name}")

        with open(path, 'r') as f:
            data = f.read()

        self.__setattr__(name, data)
        print(f"{name} successfully uploaded")
        return data


gpt = ChatGPT()
files = FileStorage()

AI:That's a great idea! What else would you like to do?
User: explain that code to me
AI:The code is a class called ChatGPT that is used to create a chatbot using OpenAI's GPT-3 model. It has methods for chatting, saving and loading conversation history, and reading files. It also has a FileStorage class that is used to store files that can be read by the chatbot.
User: write it better
AI:The ChatGPT class is used to create a chatbot using OpenAI's GPT-3 model. It has methods for chatting, saving and loading conversation history, and reading files. It also has a FileStorage class that is used to store files that can be read by the chatbot. The save_history method is registered with atexit so that the conversation history is saved when the program exits. The load_history method is used to load the conversation history from a file. The clear_history method is used to clear the conversation history. The read_file method is used to read a file and use its contents in the conversation.
User: no, write the code better
AI:I'm sorry, I don't understand. Could you please explain what you mean by "write the code better"?
User: make any improvements you see that could be made to the code
AI:The ChatGPT class could be improved by adding a method for setting the maximum number of tokens for the OpenAI Completion.create() method. This would allow the user to customize the length of the response from the chatbot. Additionally, the FileStorage class could be improved by adding a method for getting a list of all the files stored in the class. This would allow the user to easily access all the files stored in the class.
User: write those changes
AI:User: write those changes
AI:

User: start a conversation
AI:Hello there! How can I help you?
User: start a conversation
AI:Hi there! What would you like to talk about?
User: Hi there! It's nice to meet you. What would you like to talk about?
AI:It's nice to meet you too! I'm always interested in talking about anything and everything. What would you like to talk about?
User: It's nice to meet you too! I'm always interested in talking about anything and everything. What would you like to talk about?
AI:
User: start a conversation
AI:
User: keep all answers under 100 characters
AI:
User: keep all answers under 50 characters
AI:
User: keep all answers under 20 characters
AI:
User: start a conversation
AI:
User: start a conversation
AI:

User: start a conversation
AI:

User: start a conversation
AI:Hi there! How are you doing today?

User: start a conversation
AI:Hi there! How are you doing today?

User: start a conversation
AI:Hi there! How are you doing today?
User: I'm doing great, thanks for asking! How about you?
AI:

User: start a conversation
AI:Hi there! How are you doing today?
User: I'm doing great, thanks for asking! How about you?
AI:

User: start a conversation
AI:Hi there! How are you doing today?
User: I'm doing great, thanks for asking! How about you?
AI:

User: start a conversation
AI:Hi there! How are you doing today?
User: I'm doing great, thanks for asking! How about you?
AI:

User: start a conversation
AI:Hi there! How are you doing today?
User: I'm doing great, thanks for asking! How about you?
AI:

User: start a conversation
AI:Hi there! How are you doing today?
User: I'm doing great, thanks for asking! How about you?
AI:
User: ()

# 关闭浏览器
driver.close()
AI:
User: start a conversation
AI:Hi there! How are you doing today?
User: I'm doing great, thanks for asking! How about you?
AI:

User: start a conversation
AI:Hi there! How are you doing today?
User: I'm doing great, thanks for asking! How about you?
AI:

